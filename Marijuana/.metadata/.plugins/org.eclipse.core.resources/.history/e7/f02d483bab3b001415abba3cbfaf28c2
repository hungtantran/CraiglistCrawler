package marijuanaCrawler;
-
import java.util.ArrayList;
import java.util.Set;

import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;

public class CraiglistEntryParser {
	private final double gramsInOunce = 28.3495;
	private final int numRetryDownloadPage = 2;
	private final String[] breakMarks = { "<br>", "<br/>", "</br>", "<br />",
			"</ br>" };

	protected String link = null;
	protected Document doc = null;
	protected String content = null;
	protected String timeCreated = null;
	protected String dateCreated = null;

	public CraiglistEntryParser(String link) {
		if (link == null)
			return;

		this.link = link;
		downloadHtmlContent(this.link, this.numRetryDownloadPage);
	}

	public CraiglistEntryParser(Document doc) {
		if (doc == null)
			return;

		this.link = null;
		this.doc = doc;
		this.content = this.doc.outerHtml();
	}

	protected void downloadHtmlContent(String url, int numRetryDownloadPage) {
		this.doc = NetworkingFunctions.downloadHtmlContent(url,
				numRetryDownloadPage);

		if (this.doc != null) {
			this.content = this.doc.outerHtml();
		} else
			this.content = null;
	}

	public boolean isValid() {
		return (this.doc != null && this.content != null);
	}

	public String getContent() {
		return this.content;
	}

	public boolean parseDoc() {
		if (!this.isValid())
			return false;

		this.parseWeedPrice();

		return true;
	}

	// Find the next instance of appearance of a subword in a strin
	private int findSubWord(String str, String subWord) {
		if (subWord == null || str == null)
			return -1;

		String string = new String(str);
		while (true) {
			int index = string.indexOf(subWord);
			if (index == -1)
				break;

			char charAfterSubWord = string.charAt(index + subWord.length());
			if (Character.isLetter(charAfterSubWord)) {
				string = string.substring(index + subWord.length());
			} else {
				return index;
			}
		}

		return -1;
	}

	private double findQuantity(String str, int index, int direction) {
		if (str == null || index < 0 || index >= str.length() || direction == 0)
			return -1;
		
		direction = direction / Math.abs(direction);
		double quantity = 0;

		boolean startQuantity = false;
		String quantityString = "";
		while (true) {
			if (index >= str.length() || index < 0)
				break;

			char curChar = str.charAt(index);
			if (Character.isLetter(curChar))
				break;

			if (startQuantity
					&& (!Character.isDigit(curChar) && curChar != ','
							&& curChar != '.' && curChar != '/' && curChar != '\\'))
				break;
			
			// Start the quantity string when finding the first digit
			if (Character.isDigit(curChar)) {
				startQuantity = true;
			}
			
			// Concat the current character belonging to the quantityString to the quantityString
			if (startQuantity
					&& (Character.isDigit(curChar) || curChar == ','
							|| curChar == '.' || curChar == '/' || curChar == '\\')) {
				
				if (direction < 0) {
					quantityString = "" + curChar + quantityString; 
				} else if (direction > 0) {
					quantityString += curChar;
				}
			}
				
			index += direction;
		}
		
		// If not found quantity string
		if (startQuantity)
			return quantity;
		
		// If found quantity string
		if (quantityString.indexOf('/') == -1 && quantityString.indexOf('\\') == -1) { 
			try {
				quantity = Double.parseDouble(quantityString);
			} catch (Exception e) {
				// TODO catch exception
			}
		} else if (quantityString.indexOf('/') != -1) {
			try {
				String firstPart = quantityString.substring(0, quantityString.indexOf('/'));
				String secondPart = quantityString.substring(quantityString.indexOf('/')+1);
				int numerator = Integer.parseInt(firstPart);
				int denominator = Integer.parseInt(secondPart);
				quantity = (double)numerator / (double)denominator;
			} catch (Exception e) {
				// TODO catch exception
			}
		} else if (quantityString.indexOf('\\') != -1) {
			try {
				String firstPart = quantityString.substring(0, quantityString.indexOf('\\'));
				String secondPart = quantityString.substring(quantityString.indexOf('\\')+1);
				int numerator = Integer.parseInt(firstPart);
				int denominator = Integer.parseInt(secondPart);
				quantity = (double)numerator / (double)denominator;
			} catch (Exception e) {
				// TODO catch exception
			}
		}

		return quantity;
	}

	// Parse out ounces quantities out of a line
	private Double[] getOunces(String line) {
		if (line == null)
			return null;

		ArrayList<Double> ounces = new ArrayList<Double>();
		String[] ounceSymbols = { "ounce", "ounces", "oz" };

		for (String sym : ounceSymbols) {
			String str = new String(line);
			// Find all the current occurence of the symbol in the line
			while (true) {
				int index = this.findSubWord(str, sym);

				if (index != -1) {
					double quantityBefore = this.findQuantity(str, index, -1);
					double quantityAfter = this.findQuantity(str,
							index + sym.length(), 1);

					// Found quantity
					if (quantityBefore > 0 || quantityAfter > 0) {
						if (quantityBefore > 0)
							ounces.add(quantityBefore);
						
						if (quantityAfter > 0)
							ounces.add(quantityAfter);
					}

					str = str.substring(index + sym.length());
				} else
					break;
			}
		}

		return (Double[]) ounces.toArray();
	}

	// Parse out gram quantities out of a line
	private Double[] getGrams(String line) {
		if (line == null)
			return null;
		
		ArrayList<Double> grams = new ArrayList<Double>();
		String[] ounceSymbols = { "gram", "grams", "gr", "g" };

		for (String sym : ounceSymbols) {
			String str = new String(line);
			// Find all the current occurence of the symbol in the line
			while (true) {
				int index = this.findSubWord(str, sym);

				if (index != -1) {
					double quantityBefore = this.findQuantity(str, index, -1);
					double quantityAfter = this.findQuantity(str,
							index + sym.length(), 1);

					// Found quantity
					if (quantityBefore > 0 || quantityAfter > 0) {
						if (quantityBefore > 0)
							ounces.add(quantityBefore);
						
						if (quantityAfter > 0)
							ounces.add(quantityAfter);
					}

					str = str.substring(index + sym.length());
				} else
					break;
			}
		}

		return (Double[]) grams.toArray();
	}

	// Parse the price of the weed
	private boolean parseWeedPrice() {
		Elements postingBodyElems = doc.select("section[id=postingbody]");

		// Return if the page has no posting body
		if (postingBodyElems.size() != 1) {
			return false;
		}

		String postingBody = postingBodyElems.get(0).toString();
		Set<String> bodyLines = Helper
				.splitString(postingBody, this.breakMarks);

		for (String line : bodyLines) {
			Double[] ounces = this.getOunces(line);
			Double[] grams = this.getGrams(line);

			// If there is no quantity information on the line
			if (ounces.length == 0 && grams.length == 0)
				continue;

			// If the number of quantities in gram and ounces are different
			if (ounces.length > 0 && grams.length > 0
					&& ounces.length != grams.length)
				continue;

		}

		return true;

	}

	public static void main(String[] args) {
		CraiglistEntryParser parser = new CraiglistEntryParser(
				"http://seattle.craigslist.org/skc/for/4666121116.html");

		if (parser.parseDoc()) {

		}
	}
}
