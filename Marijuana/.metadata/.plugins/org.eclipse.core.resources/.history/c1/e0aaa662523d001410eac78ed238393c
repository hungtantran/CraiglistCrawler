package marijuanaCrawler;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;

// TODO rewrite the class with the link http://www.craigslist.org/about/sites

public class CraiglistLocationLinkCrawl {
	private final int numRetryDownloadPage = 2;
	private final String startLink = "http://craiglist.org";
	private final String startStateString = "//geo.craigslist.org/iso/us/";

	private Map<String, Set<String>> stateToLinksMap = null;
	private Map<String, String> linkToStateMap = null;

	public CraiglistLocationLinkCrawl() {
		this.stateToLinksMap = new HashMap<String, Set<String>>();
		this.linkToStateMap = new HashMap<String, String>();
	}

	public Map<String, Set<String>> getStateToLinksMap() {
		return this.stateToLinksMap;
	}

	public Map<String, String> getLinkToStateMap() {
		return this.linkToStateMap;
	}

	public boolean parseCity(String state, String stateLink) {
		if (stateLink == null || state == null)
			return false;
		
		stateLink = stateLink.trim().toLowerCase();
		state = state.trim().toLowerCase();
		
		if (stateLink.isEmpty() || state.isEmpty())
			return false;

		Document doc = NetworkingFunctions.downloadHtmlContent(stateLink,
				this.numRetryDownloadPage);

		if (doc == null)
			return false;

		String htmlContent = doc.outerHtml();
		String startList = "<div id=\"list\">";
		
		boolean listPage = (htmlContent.indexOf(startList) != -1);
		// TODO make it city instead of state
		//Set<String> citiesInState = new HashSet<String>();
		Set<String> links = new HashSet<String>();
		
		// If the state has more than one location so it will lead to a listing page
		if (listPage) {
			htmlContent = htmlContent.substring(htmlContent.indexOf(startList)
					+ startList.length());
			String[] cityLinks = htmlContent.split("<a href=\"");
			String[] cities = new String[cityLinks.length];

			for (int i = 1; i < cityLinks.length; i++) {
				String linkElem = cityLinks[i];
				cityLinks[i] = linkElem.substring(0, linkElem.indexOf("\""));
				cities[i] = linkElem.substring(linkElem.indexOf("\">") + 2,
						linkElem.indexOf("</a>"));

				if (linkElem.indexOf("<b>") != -1)
					cities[i] = linkElem.substring(linkElem.indexOf("<b>") + 3,
							linkElem.indexOf("</b>"));

				System.out.println(cities[i] + " : " + cityLinks[i]);
				links.add(cityLinks[i]);
			}
		}
		// Else the state only has one craiglist link
		else {
			links.add(stateLink);
		}
		
		this.linkToStateMap.put(stateLink, state);
		this.stateToLinksMap.put(state, links);

		return true;
	}

	public boolean getLink() {
		Document doc = NetworkingFunctions.downloadHtmlContent(this.startLink,
				this.numRetryDownloadPage);

		if (doc == null)
			return false;
		
		
		
				Elements postingBodyElems = doc.select("section[id=postingbody]div[class=colmask]");

		// Return if the page has no posting body
		if (postingBodyElems.size() != 1) {
			System.out.println("No body element");
			return false;
		}

		String postingBody = postingBodyElems.get(0).toString();
		Set<String> bodyLines = Helper
				.splitString(postingBody, this.breakMarks);
		
		String htmlContent = doc.outerHtml();
		String[] stateLinks = htmlContent.split(this.startStateString);
		String[] states = new String[stateLinks.length];

		for (int i = 1; i < stateLinks.length; i++) {
			String linkElem = stateLinks[i];
			stateLinks[i] = "http:" + this.startStateString
					+ linkElem.substring(0, linkElem.indexOf("\""));
			states[i] = linkElem.substring(linkElem.indexOf(">") + 1,
					linkElem.indexOf("<"));

			System.out.println();
			System.out.println(states[i] + " : " + stateLinks[i]);

			if (!this.parseCity(states[i], stateLinks[i]))
				return false;
		}

		return true;
	}

	public static void main(String[] args) {
		// CraiglistLocationLinkCrawl crawler = new
		// CraiglistLocationLinkCrawl();
		//
		// if (crawler.getLink()) {
		//
		// }
	}
}
