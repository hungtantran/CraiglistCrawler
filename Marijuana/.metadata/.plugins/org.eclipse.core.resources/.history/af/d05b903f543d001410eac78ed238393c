package marijuanaCrawler;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

// TODO rewrite the class with the link http://www.craigslist.org/about/sites

public class CraiglistLocationLinkCrawl {
	private final int numRetryDownloadPage = 2;
	private final String startLink = "http://craiglist.org";
	private final String startStateString = "//geo.craigslist.org/iso/us/";

	private Map<String, Set<String>> stateToLinksMap = null;
	private Map<Set<String>, String> linkToStateMap = null;

	public CraiglistLocationLinkCrawl() {
		this.stateToLinksMap = new HashMap<String, Set<String>>();
		this.linkToStateMap = new HashMap<Set<String>, String>();
	}

	public Map<String, Set<String>> getStateToLinksMap() {
		return this.stateToLinksMap;
	}

	public Map<Set<String>, String> getLinkToStateMap() {
		return this.linkToStateMap;
	}

	public boolean parseCity(String state, String stateLink) {
		if (stateLink == null || state == null)
			return false;

		stateLink = stateLink.trim().toLowerCase();
		state = state.trim().toLowerCase();

		if (stateLink.isEmpty() || state.isEmpty())
			return false;

		Document doc = NetworkingFunctions.downloadHtmlContent(stateLink,
				this.numRetryDownloadPage);

		if (doc == null)
			return false;

		String htmlContent = doc.outerHtml();
		String startList = "<div id=\"list\">";

		boolean listPage = (htmlContent.indexOf(startList) != -1);
		// TODO make it city instead of state
		// Set<String> citiesInState = new HashSet<String>();
		Set<String> links = new HashSet<String>();

		// If the state has more than one location so it will lead to a listing
		// page
		if (listPage) {
			htmlContent = htmlContent.substring(htmlContent.indexOf(startList)
					+ startList.length());
			String[] cityLinks = htmlContent.split("<a href=\"");
			String[] cities = new String[cityLinks.length];

			for (int i = 1; i < cityLinks.length; i++) {
				String linkElem = cityLinks[i];
				cityLinks[i] = linkElem.substring(0, linkElem.indexOf("\""));
				cities[i] = linkElem.substring(linkElem.indexOf("\">") + 2,
						linkElem.indexOf("</a>"));

				if (linkElem.indexOf("<b>") != -1)
					cities[i] = linkElem.substring(linkElem.indexOf("<b>") + 3,
							linkElem.indexOf("</b>"));

				System.out.println(cities[i] + " : " + cityLinks[i]);
				links.add(cityLinks[i]);
			}
		}
		// Else the state only has one craiglist link
		else {
			links.add(stateLink);
		}

		this.linkToStateMap.put(stateLink, state);
		this.stateToLinksMap.put(state, links);

		return true;
	}

	public boolean getLink() {
		Document doc = NetworkingFunctions.downloadHtmlContent(this.startLink,
				this.numRetryDownloadPage);

		if (doc == null)
			return false;

		Elements countryElems = doc.select("div[class=colmask]");

		// Return if the page has no country div
		if (countryElems.size() == 0) {
			System.out.println("No country element");
			return false;
		}
		
		// US elem is the first one
		Element usCountryElem = countryElems.get(0);
		
		Elements stateNameElems = usCountryElem.select("h4");
		Elements stateCitiesElems = usCountryElem.select("ul");
		
		if (stateNameElems.size() != stateCitiesElems.size())
			return false;
		
		if (stateNameElems.size() == 0)
			return false;
		
		int numStates = stateNameElems.size();
		
		// Iterate through each state listed in craiglist
		for (int i = 0; i < numStates; i++) {
			String stateName = stateNameElems.get(i).text();
			
			Elements citiesElems = stateCitiesElems.select("li");
			Set<String> linksInState = new HashSet<String>();
			int numCitiesInStates = citiesElems.size();
			
			// Iterate through each city of the current state
			for (int j = 0; j < numCitiesInStates; j++) {
				// TODO use city name when we have location based index
				String cityName = citiesElems.get(j).text();
				String link = citiesElems.get(j).select("a").attr("href").toString();
				linksInState.add(link);
			}
			
			this.linkToStateMap.put(linksInState, stateName);
			this.stateToLinksMap.put(stateName, linksInState);
		}
		
		return true;
	}

	public static void main(String[] args) {
		// CraiglistLocationLinkCrawl crawler = new
		// CraiglistLocationLinkCrawl();
		//
		// if (crawler.getLink()) {
		//
		// }
	}
}
