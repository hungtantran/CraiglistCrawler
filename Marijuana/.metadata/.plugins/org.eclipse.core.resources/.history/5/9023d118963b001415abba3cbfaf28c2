package marijuanaCrawler;

public class Helper {
	public static String[] splitString(String string, String delimiter) {
		if (string == null || delimiter == null)
			return null;

		ArrayList<String> splitString = new ArrayList<String>();
		int prevPos = 0;
		for (int i = 0; i < string.length() - delimiter.length() + 1; i++) {
			String subStringAtCurPos = string.substring(i,
					i + delimiter.length());
			if (subStringAtCurPos.equals(delimiter)) {
				String token = string.substring(prevPos, i);
				if (token.length() > 0)
					splitString.add(token);
				i += delimiter.length();
				prevPos = i;
			}
		}

		String token = string.substring(prevPos, string.length());
		if (token.length() > 0)
			splitString.add(token);

		String[] wordsArray = new String[splitString.size()];
		for (int i = 0; i < splitString.size(); i++)
			wordsArray[i] = splitString.get(i);

		return wordsArray;
	}

	// Given a string and list of delimiters. Split the string into a set of
	// words with delimiter contained in the list
	public static Set<String> splitString(String string, String[] delimiters) {
		if (string == null || delimiters == null)
			return null;

		Set<String> wordsSet = new HashSet<String>();
		wordsSet.add(string);
		for (String delimiter : delimiters) {
			Set<String> tempSet = new HashSet<String>();

			for (String word : wordsSet) {
				String[] newWords = Helper.splitString(word, delimiter);
				for (String newWord : newWords)
					tempSet.add(newWord);
			}

			wordsSet = tempSet;
		}

		return wordsSet;
	}
}
