package marijuanaCrawler;

import java.util.ArrayList;
import java.util.Set;

import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;

public class CraiglistEntryParser {
	private final double gramsInOunce = 28.3495;
	private final int numRetryDownloadPage = 2;
	private final String[] breakMarks = { "<br>", "<br/>", "</br>", "<br />", "</ br>" };

	protected String link = null;
	protected Document doc = null;
	protected String content = null;
	protected String timeCreated = null;
	protected String dateCreated = null;

	public CraiglistEntryParser(String link) {
		if (link == null)
			return;

		this.link = link;
		downloadHtmlContent(this.link, this.numRetryDownloadPage);
	}

	public CraiglistEntryParser(Document doc) {
		if (doc == null)
			return;

		this.link = null;
		this.doc = doc;
		this.content = this.doc.outerHtml();
	}

	protected void downloadHtmlContent(String url, int numRetryDownloadPage) {
		this.doc = NetworkingFunctions.downloadHtmlContent(url,
				numRetryDownloadPage);

		if (this.doc != null) {
			this.content = this.doc.outerHtml();
		} else
			this.content = null;
	}

	public boolean isValid() {
		return (this.doc != null && this.content != null);
	}

	public String getContent() {
		return this.content;
	}

	public boolean parseDoc() {
		if (!this.isValid())
			return false;

		this.parseWeedPrice();

		return true;
	}
	
	// Find the next instance of appearance of a subword in a strin
	private int findSubWord(String str, String subWord) {
		if (subWord == null || str == null)
			return -1;
		
		while (true) {
			int index = str.indexOf(subWord);
			if (index == -1)
				break;
			
			char charAfterSubWord = str.charAt(index+subWord.length());
			if (str.charAt(index+subWord))
		}
		
		return -1;
	}
	
	// Parse out ounces quantities out of a line
	private Double[] getOunces(String line) {
		if (line == null)
			return null;
		
		ArrayList<Double> ounces = new ArrayList<Double>();
		String[] ounceSymbols = { "gram", "grams", "gr", "g" };
		
		for (String sym : ounceSymbols) {
			
		}
		
		return (Double[])ounces.toArray();
	}
	
	// Parse out gram quantities out of a line
	private Double[] getGrams(String line) {
		if (line == null)
			return null;
		
		ArrayList<Double> grams = new ArrayList<Double>();
		
		return (Double[])grams.toArray();
	}
	
	// Parse the price of the weed
	private boolean parseWeedPrice() {
		Elements postingBodyElems = doc.select("section[id=postingbody]");
		
		// Return if the page has no posting body
		if (postingBodyElems.size() != 1) {
			return false;
		}
		
		String postingBody = postingBodyElems.get(0).toString();
		Set<String> bodyLines = Helper.splitString(postingBody, this.breakMarks);
		
		for(String line : bodyLines) {
			Double[] ounces = this.getOunces(line);
			Double[] grams = this.getGrams(line);
			
			// If there is no quantity information on the line
			if (ounces.length == 0 && grams.length == 0)
				continue;
			
			// If the number of quantities in gram and ounces are different
			if (ounces.length > 0 && grams.length > 0 && ounces.length != grams.length)
				continue;
			
			
		}
		
		return true;

	}

	public static void main(String[] args) {
		CraiglistEntryParser parser = new CraiglistEntryParser(
				"http://seattle.craigslist.org/skc/for/4666121116.html");

		if (parser.parseDoc()) {

		}
	}
}
