package marijuanaCrawler;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

// TODO rewrite the class with the link http://www.craigslist.org/about/sites

public class CraiglistLocationLinkCrawl {
	private final int numRetryDownloadPage = 2;
	private final String startLink = "http://craiglist.org";
	private final String startStateString = "//geo.craigslist.org/iso/us/";

	private Map<String, Set<String>> stateToLinksMap = null;
	private Map<Set<String>, String> linkToStateMap = null;

	public CraiglistLocationLinkCrawl() {
		this.stateToLinksMap = new HashMap<String, Set<String>>();
		this.linkToStateMap = new HashMap<Set<String>, String>();
	}

	public Map<String, Set<String>> getStateToLinksMap() {
		return this.stateToLinksMap;
	}

	public Map<Set<String>, String> getLinkToStateMap() {
		return this.linkToStateMap;
	}
	
	public boolean getLink() {
		Document doc = NetworkingFunctions.downloadHtmlContent(this.startLink,
				this.numRetryDownloadPage);

		if (doc == null)
			return false;

		Elements countryElems = doc.select("div[class=colmask]");

		// Return if the page has no country div
		if (countryElems.size() == 0) {
			System.out.println("No country element");
			return false;
		}
		
		// US elem is the first one
		Element usCountryElem = countryElems.get(0);
		
		Elements stateNameElems = usCountryElem.select("h4");
		Elements stateCitiesElems = usCountryElem.select("ul");
		
		System.out.println("Found "+stateNameElems+" state names and "+stateCitiesElems+" state elems");
		
		if (stateNameElems.size() != stateCitiesElems.size())
			return false;
		
		if (stateNameElems.size() == 0)
			return false;
		
		int numStates = stateNameElems.size();
		
		// Iterate through each state listed in craiglist
		for (int i = 0; i < numStates; i++) {
			String stateName = stateNameElems.get(i).text();
			System.out.println(stateName+":");
			
			Elements citiesElems = stateCitiesElems.select("li");
			Set<String> linksInState = new HashSet<String>();
			int numCitiesInStates = citiesElems.size();
			
			// Iterate through each city of the current state
			for (int j = 0; j < numCitiesInStates; j++) {
				// TODO use city name when we have location based index
				String cityName = citiesElems.get(j).text();
				String link = citiesElems.get(j).select("a").attr("href").toString();
				linksInState.add(link);
				System.out.println(cityName+": "+link);
			}
			
			this.linkToStateMap.put(linksInState, stateName);
			this.stateToLinksMap.put(stateName, linksInState);
		}
		
		return true;
	}

	public static void main(String[] args) {
		// CraiglistLocationLinkCrawl crawler = new
		// CraiglistLocationLinkCrawl();
		//
		// if (crawler.getLink()) {
		//
		// }
	}
}
