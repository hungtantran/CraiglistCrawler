=======
CHANGES
=======

-----
0.10.0
-----

The dalton has been added as an alias for the unified atomic mass
unit, in response to the 2005 IUPAP report recognizing that both
terms should be officially recognized. Da is recognized as the symbol
for the dalton.

The test suite has been refactored to use the unittest package
provided by the python-2.7 and python-3.2 standard library. With
python-2.6 or python-3.{0,1}, unittest2 is required. The test suite
is run with::

   python setup.py test

Quantities no longer requires or uses Distribute or Setuptools.


The test framework has been refactored to use unittest exclusively
(requires unittest2 with  python-2.6, python-3.0, and python-3.1).
The test suite is now run in the source directory::

   python setup.py test

Added a defintion for the centipoise.

Bugs fixed
**********

* #11 incorrect definition for millidarcy
* #12 add definition of centipoise
* #13 add ddof keyword for std, var methods
* #16 add "latex" property to dimensionality for latex format strings
* #19 Astronomical Unit definition updated to reflect 2009 spec


-----
0.9.0
-----

Numpy-1.4.0 or later is also required, in order to properly handle
units during in-place arithmetic.

Physical constants are now instances of Quantity, rather than
UncertainQuantity. Development on UncertainQuantity is not as
advanced, so hopefully this change will make the constants package
more robust.

Bugs fixed
**********

* #1 use revolution/min instead of 1/min as definition of rpm 
* #2 silently fail to import test runner if nose is not installed
* #4 remove the "jiffy", as there are conflicting definitions
  depending on (or even within a) discipline.
* #5 fix the definition of femtometer

-----
0.8.0
-----

Quantities now requires Python-2.6 or later. Python-3 is supported.

The fill method, and __setitem__ methods will now accept scalar
values in addition to quantities. If a scalar is passed, an
assumption is made that the change should only be applied to the
quantity's magnitude. The fill method will also accept a quantity
with incompatible units, and will overwrite the previous units.

The log and exp functions have been removed. Quantities will work
with numpy's version of these functions.

Quantities development has migrated from bzr/launchpad to
git/github. Please report problems to 
http://github.com/python-quantities/python-quantities or visit the
mailing list at http://groups.google.com/group/python-quantities

Bugs fixed
**********

* #501563 incorrect conversion ratio for gills/pints
* #515314 don't memoize simplified, fixes set_default_units
* #526008 add definition of stone, used in UK to measure mass
* #525991 support specifying units using unicode
* #529266 fix conversion to gallons

-----
0.7.0
-----

A critical problem was identified, caused by a conflict between farad
and Faraday identified in quantities <0.7. F is commonly used as a
symbol for both the farad and Faraday's constant. This is problematic
for quanitities, which registers its units so they can be accessed
using a string corresponding to the unit name or symbol. In this
case, the Faraday constant was registered after the farad, so any
quantity that was expressed in terms of farads would be incorrectly
simplified using the Faraday constant. This problem has been fixed
and the registry has been improved to prevent overwriting previously
registered names or symbols. F is now reserved for the farad.

Addition and subtraction of quantities with different but compatible
units is now supported. Additionally, changes have been made in the
forthcoming numpy-1.4.0 to extend this compatibility to other ufuncs
as well.

Numpydoc, an external package developed to extend Sphinx for the
numpy documentation project, is now required to build quantities'
documentation. 

Bugs fixed
**********

* #495181 epsilon_0 simplifies incorrectly
* #490323 bad spelling for polarizabilities
